/****************************************************************************/
/* TypeS基板使用マイコンカー　サンプルプログラム Ver1.11                    */
/*                          2008.03 ジャパンマイコンカーラリー実行委員会    */
/****************************************************************************/
/*
Ver1.00 2008.03.29 作成
Ver1.01 2008.06.12 一部修正
Ver1.10 2009.02.01 相補PWMモード部分、大幅に修正
Ver1.11 2009.04.28 speed_r関数の一部修正

*/

/*======================================*/
/* インクルード                         */
/*======================================*/
#include    <no_float.h>                /* stdioの簡略化 最初に置く     */
#include    <stdio.h>                   /* printfなど用                 */
#include    <machine.h>                 /* 組み込み関数用               */
#include    "h8_3048.h"                 /* H8/3048F-ONEレジスタ定義     */
#include    "i2c_eeprom.h"              /* EEP-ROM追加(データ記録)      */
#include    "types_beep.h"              /* TypeS基板のブザー            */
#include 	"isCamera.h"					/* カメラ用ライブラリ			*/


/*======================================*/
/* シンボル定義                         */
/*======================================*/
/* 定数設定 */
#define     MOTOR_CYCLE         3072    /* モータPWMのサイクル兼、      */
                                        /*          タイマ値 1ms        */
#define     MOTOR_OFFSET        37      /* パルスをずらす時間           */
                                        /* 1=325.52[ns]                 */

#define     FREE                1       /* モータモード　フリー         */
#define     BRAKE               0       /* モータモード　ブレーキ       */

/*======================================*/
/* プロトタイプ宣言                     */
/*======================================*/
void init( void );
unsigned char center_inp( void );
unsigned char dipsw_get( void );
unsigned char dipsw_get2( void );
unsigned char pushsw_get( void );
unsigned char cn8_get( void );
void led_out( unsigned char led );
void speed_r( int accele_l, int accele_r );
void speed2_r( int accele_l, int accele_r );
void speed_f( int accele_l, int accele_r );
void speed2_f( int accele_l, int accele_r );
void motor_mode_r( int mode_l, int mode_r );
void motor_mode_f( int mode_l, int mode_r );
void LED_Rught( int pwm );
void motor_mode_s( int mode );
void beep_out( int flag );

void servoControl( void );

/*======================================*/
/* グローバル変数の宣言                 */
/*======================================*/
int             pattern;                /* マイコンカー動作パターン     */
int             crank_mode;             /* 1:クランクモード 0:通常      */
unsigned long   cnt0;                   /* タイマ用                     */
unsigned long   cnt1;                   /* タイマ用                     */

/* エンコーダ関連 */
int             iTimer10;               /* 10msカウント用               */
long            lEncoderTotal;          /* 積算値保存用                 */
int             iEncoderMax;            /* 10ms毎の値の最大値保存用     */
int             iEncoder;               /* 10ms毎の最新値               */
unsigned int    uEncoderBuff;           /* 計算用　割り込み内で使用     */

/*  サーボ関連 */
int             iSensorBefore;          /* 前回のセンサ値保存           */
int             iServoPwm;              /* サーボＰＷＭ値               */
int             iAngle0;                /* 中心時のA/D値保存            */

/* センサ関連 */
int             iSensorPattern;         /* センサ状態保持用             */

/* データ保存関連 */
int             saveIndex;              /* 保存インデックス             */
int             saveSendIndex;          /* 送信インデックス             */
int             saveFlag;               /* 保存フラグ                   */
char            saveData[16];           /* 一時保存エリア               */
/*
保存内容
0:pattern       1:Sensor        2:現在の角度1   3:現在の角度2
4:アナログ値1   5:アナログ値2   6:サーボのPWM   7:motor_f_l
8:motor_f_r     9:motor_r_l     10:motor_r_r    11:iEncoder
12:             13:             14:             15:
*/

/************************************************************************/
/* メインプログラム                                                     */
/************************************************************************/
void main( void )
{
    int             i, j;
    unsigned int    u;
    char            c;

    /* マイコン機能の初期化 */
    init();                             /* 初期化                       */
    initI2CEeprom( &P6DDR, &P6DR, 0x90, 6, 5);  /* EEP-ROM初期設定      */
    initBeepS();                        /* ブザー関連処理               */
    init_sci1( 0x00, 79 );              /* SCI1初期化                   */
    set_ccr( 0x00 );                    /* 全体割り込み許可             */
	initCamera(15,113);

    /* マイコンカーの状態初期化 */
    motor_mode_f( BRAKE, BRAKE );
    motor_mode_r( BRAKE, BRAKE );
    motor_mode_s( BRAKE );
    speed_f( 0, 0 );
    speed_r( 0, 0 );
    LED_Rught( -30 );
    setBeepPatternS( 0x8000 );
	pattern = 2000;

    /* スタート時、スイッチが押されていればデータ転送モード */
    if( pushsw_get() ) {
        pattern = 101;
        cnt1 = 0;
    }

    while( 1 ) {
	sensor_process();
    I2CEepromProcess();                 /* I2C EEP-ROM保存処理          */

    switch( pattern ) {
    case 0:
        /* プッシュスイッチ押下待ち */
        LED_Rught( 0 );
        if( pushsw_get() ) {
            setBeepPatternS( 0x8000 );
            clearI2CEeprom();           /* 数秒かかる                   */
            setBeepPatternS( 0xcc00 );
            cnt1 = 0;
            pattern = 1;
            break;
        }
        i =  (cnt1/200) % 2 + 1;
        led_out( i );                   /* LED点滅処理                  */
        break;

    case 1:
        /* スタートバー開待ち */
        LED_Rught( iServoPwm / 2 );
//            iAngle0 = getServoAngle();  /* 0度の位置記憶                */
            led_out( 0x0 );
            cnt1 = 0;
            pattern = 11;
            saveFlag = 1;               /* データ保存開始               */
            break;

    case 11:
        /* 通常トレース */
        LED_Rught( iServoPwm );
//        i = getServoAngle();
        if( i > 170 ) {
            speed_f( 0, 0 );
            speed_r( 0, 0 );
       } else {
            speed_f( 100, 100 );
            speed_r( 100, 100 );
        }
        break;

    case 101:
        /* 停止 */
        LED_Rught( 0 );
        speed_f( 0, 0 );
        speed_r( 0, 0 );
        setBeepPatternS( 0xc000 );
        saveFlag = 0;
        saveSendIndex = 0;
        pattern = 102;
        cnt1 = 0;
        break;

    case 102:
        /* プッシュスイッチが離されたかチェック */
        if( !pushsw_get() ) {
            pattern = 103;
            cnt1 = 0;
        }
        break;

   case 103:
        /* 0.5s待ち */
        if( cnt1 >= 500 ) {
            pattern = 104;
            cnt1 = 0;
        }
        break;

    case 104:
        /* プッシュスイッチが押されたかチェック */
        led_out( cnt1 / 200 % 2 ? 0x6 : 0x9  );
        if( pushsw_get() ) {
            pattern = 105;
            cnt1 = 0;
        }
        break;

    case 105:
        /* タイトル転送、転送準備 */
        printf( "\n" );
        printf( "CarName Data Out\n" ); /* 自分のカーネームを入れてください */
        printf( "Pattern, Sensor, 角度, アナログ値, サーボPWM, " );
        printf( "左前PWM, 右前PWM, 左後PWM, 右後PWM, エンコーダ\n" );
        pattern = 106;
        break;

    case 106:
        /* データ転送 */
        led_out( 1 << (cnt1/100) % 4 );

        /* 終わりのチェック */
        if( (readI2CEeprom( saveSendIndex )==0) ||
                                (saveSendIndex >= 0x8000) ) {
            pattern = 107;
            setBeepPatternS( 0xff00 );
            cnt1 = 0;
            break;
        }

        /* データの転送 */
        printf( "%d,0x%02x,%d,%d,%d,%d,%d,%d,%d,%d\n",
            /* パターン */
            (int)readI2CEeprom( saveSendIndex+0 ),
            /* センサ */
            (unsigned char)readI2CEeprom( saveSendIndex+1 ),
            /* 角度 */
            (int)((unsigned char)readI2CEeprom(saveSendIndex+2)*0x100 +
                            (unsigned char)readI2CEeprom(saveSendIndex+3) ),
            /* アナログセンサ値 */
            (int)((unsigned char)readI2CEeprom(saveSendIndex+4)*0x100 +
                            (unsigned char)readI2CEeprom(saveSendIndex+5) ),
            /* サーボPWM */
            readI2CEeprom( saveSendIndex+6 ),
            /* 左前PWM */
            readI2CEeprom( saveSendIndex+7 ),
            /* 右前PWM */
            readI2CEeprom( saveSendIndex+8 ),
            /* 左後PWM */
            readI2CEeprom( saveSendIndex+9 ),
            /* 右後PWM */
            readI2CEeprom( saveSendIndex+10 ),
            /* エンコーダ */
            readI2CEeprom( saveSendIndex+11 )
        );

        saveSendIndex += 16;            /* 次の送信準備                 */
        break;

    case 107:
        /* 転送終了 */
        led_out( 0xf );
        break;

	case 2000:
		if(cnt0 > 2000){
//			raw_view();
			bi_view();
//			printf("sensor8 = %x   ",sensor8);
//			printf("PID = %d\n",pid_angle);
			cnt0 = 0;
		}
		break;
	
        default:
            break;
        }
    }
}

/************************************************************************/
/* H8/3048F-ONE 内蔵周辺機能の初期化                                    */
/************************************************************************/
void init( void )
{
    /* ポートの入出力設定 */
    P1DDR = 0xff;
    P2DDR = 0x00;
    P3DDR = 0xff;
    P4DDR = 0xff;
    P5DDR = 0xff;
    P6DDR = 0x90;                       /* CPU基板上のDIP SW            */
    P8DDR = 0xe3;						/* P80 -> CLK   P81 -> SI		*/
    P9DDR = 0xf7;
    PADDR = 0xd6;
    PBDDR = 0xff;

    /* A/Dの初期設定 */
    AD_CSR = 0x0a;                      /* スキャンモード使用AN2    CKS -> 134 */
//    AD_CSR |= 0x20;                     /* ADスタート                   */

    /* ITU0 左前モータ用PWM */
    ITU0_TCR = 0x23;                    /* カウンタ、クリアの設定       */
    ITU0_GRA = MOTOR_CYCLE;             /* PWM周期                      */
    ITU0_GRB = 0;                       /* デューティ比設定             */

    /* ITU1 右前モータ用PWM */
    ITU1_TCR = 0x23;                    /* カウンタ、クリアの設定       */
    ITU1_GRA = MOTOR_CYCLE;             /* PWM周期                      */
    ITU1_GRB = 0;                       /* デューティ比設定             */

    /* ITU2 エンコーダ */
    ITU2_TCR = 0x14;                    /* PA0パルス入力端子            */

    /* ITU3,4 右後、左後、サーボモータ用PWM兼、割り込み */
    ITU3_TCR = 0x03;
    ITU4_TCR = 0x03;
    ITU_FCR  = 0x2e;                    /* ITU3,4で相補PWMモード        */
    ITU_TOCR = 0x12;                    /* TIOCB3,TOCXA4,TOCXB4は反転   */
    ITU3_IER = 0x01;                    /* TCNT = GRAによる割込み制御   */
    ITU3_CNT = MOTOR_OFFSET;
    ITU4_CNT = 0;
    ITU3_GRA = MOTOR_CYCLE / 2 + MOTOR_OFFSET - 2;  /* PWM周期設定      */
    ITU3_BRB = ITU3_GRB = MOTOR_CYCLE / 2 - 2;
    ITU4_BRA = ITU4_GRA = MOTOR_CYCLE / 2 - 2;
    ITU4_BRB = ITU4_GRB = MOTOR_CYCLE / 2 - 2;

    ITU_MDR = 0x03;                     /* PWMモード設定                */
    ITU_STR = 0x1f;                     /* ITUのカウントスタート        */
}

/************************************************************************/
/* ITU3 割り込み処理                                                    */
/************************************************************************/
#pragma interrupt( interrupt_timer3 )
void interrupt_timer3( void )
{
    unsigned int    i;

    ITU3_TSR &= 0xfe;                   /* フラグクリア                 */
    cnt1++;
	cnt0++;

    /* サーボモータ制御 */
    servoControl();

    /* ブザー処理 */
    beepProcessS();

    /* エンコーダ制御 */
    iTimer10++;
    if( iTimer10 >= 10 ) {
        iTimer10 = 0;
        i = ITU2_CNT;
        iEncoder       = i - uEncoderBuff;
        lEncoderTotal += iEncoder;
        if( iEncoder > iEncoderMax )
                    iEncoderMax = iEncoder;
        uEncoderBuff = i;

        /* データ保存関連 */
        if( saveFlag ) {
            saveData[0] = pattern;      /* パターン                     */
            saveData[1] = (center_inp()<<4) ; /* センサ   */
//            i = getServoAngle();        /* 角度                         */
            saveData[2] = i >> 8;
            saveData[3] = i & 0xff;
//            i = getAnalogSensor();      /* アナログセンサ値             */
            saveData[4] = i >> 8;
            saveData[5] = i & 0xff;
            /*  6はハンドル関数内でサーボPWM保存        */
            /*  7はモータ関数内で左前モータPWM値保存    */
            /*  8はモータ関数内で右前モータPWM値保存    */
            /*  9はモータ関数内で左後モータPWM値保存    */
            /* 10はモータ関数内で右後モータPWM値保存    */
            saveData[11] = iEncoder;    /* エンコーダ                   */
            saveData[12] = 0;
            saveData[13] = 0;
            saveData[14] = 0;
            saveData[15] = 0;
            setPageWriteI2CEeprom( saveIndex, 16, saveData );
            saveIndex += 16;
            if( saveIndex >= 0x8000 ) saveFlag = 0;
        }
    }
}


/************************************************************************/
/* アナログセンサ基板TypeSの中心デジタルセンサ読み込み                  */
/* 引数　 なし                                                          */
/* 戻り値 中心デジタルセンサ 0:黒 1:白                                  */
/************************************************************************/
unsigned char center_inp( void )
{
    unsigned char sensor;

    sensor  = ~PADR & 0x20;             /* アナログセンサ基板TypeSの    */
    sensor  = !!sensor;                 /* 中心デジタルセンサ読み込み   */

    return sensor;
}

/************************************************************************/
/* CPUボード上のディップスイッチ値読み込み                              */
/* 戻り値 スイッチ値 0〜15                                              */
/************************************************************************/
unsigned char dipsw_get( void )
{
    unsigned char sw;

    sw  = ~P6DR;                        /* ディップスイッチ読み込み     */
    sw &= 0x0f;

    return  sw;
}

/************************************************************************/
/* モータドライブ基板TypeS上のディップスイッチ値読み込み                */
/* 戻り値 スイッチ値 0〜15                                              */
/************************************************************************/
unsigned char dipsw_get2( void )
{
    unsigned char sw;

    sw  = ~P2DR;                        /* ドライブ基板TypeSのSW読み込み*/

    return  sw;
}

/************************************************************************/
/* モータドライブ基板TypeS上のプッシュスイッチ値読み込み                */
/* 戻り値 スイッチ値 0:OFF 1:ON                                         */
/************************************************************************/
unsigned char pushsw_get( void )
{
    unsigned char sw;

    sw = ~P8DR & 0x10;                  /* プッシュスイッチ読み込み     */
    sw = !!sw;

    return  sw;
}

/************************************************************************/
/* モータドライブ基板TypeSのCN8の状態読み込み                           */
/* 戻り値 0〜15                                                         */
/************************************************************************/
unsigned char cn8_get( void )
{
    unsigned char data;

    data = P7DR >> 4;

    return  data;
}

/************************************************************************/
/* モータドライブ基板TypeSのLED制御                                     */
/* 引数　4個のLED制御 0:OFF 1:ON                                        */
/************************************************************************/
void led_out( unsigned char led )
{
    unsigned char data;

    led <<= 4;
    data = P1DR & 0x0f;
    P1DR = data | led;
}

/************************************************************************/
/* 後輪の速度制御                                                       */
/* 引数　 左モータ:-100〜100 , 右モータ:-100〜100                       */
/*        0で停止、100で正転100%、-100で逆転100%                        */
/************************************************************************/
void speed_r( int accele_l, int accele_r )
{
    unsigned int    sw_data;
    unsigned int    work;

    sw_data  = dipsw_get() + 5;         /* ディップスイッチ読み込み     */
    sw_data *= 5;                       /* 5〜20 → 25〜100に変換       */

    saveData[ 9] = accele_l * sw_data / 100;    /* ログ保存             */
    saveData[10] = accele_r * sw_data / 100;    /* ログ保存             */

    /* 左モータ */
    if( accele_l > 0 ) {
        PBDR &= 0xbf;
    } else if( accele_l < 0 ) {
        PBDR |= 0x40;
        accele_l = -accele_l;
    }
    work   = MOTOR_CYCLE / 2 - MOTOR_OFFSET - 2;
    work   = (long)work * accele_l * sw_data / 10000;
    ITU4_BRA = MOTOR_CYCLE / 2 - 2 - work;

    /* 右モータ */
    if( accele_r > 0 ) {
        PBDR &= 0x7f;
    } else if( accele_r < 0 ) {
        PBDR |= 0x80;
        accele_r = -accele_r;
    }
    work   = MOTOR_CYCLE / 2 - MOTOR_OFFSET - 2;
    work   = (long)work * accele_r * sw_data / 10000;
    ITU3_BRB = MOTOR_CYCLE / 2 - 2 - work;
}

/************************************************************************/
/* 後輪の速度制御2 ディップスイッチには関係しないspeed関数              */
/* 引数　 左モータ:-100〜100 , 右モータ:-100〜100                       */
/*        0で停止、100で正転100%、-100で逆転100%                        */
/************************************************************************/
void speed2_r( int accele_l, int accele_r )
{
    unsigned int    sw_data;
    unsigned int    work;

    saveData[ 9] = accele_l;            /* ログ保存                     */
    saveData[10] = accele_r;            /* ログ保存                     */

    /* 左モータ */
    if( accele_l > 0 ) {
        PBDR &= 0xbf;
    } else if( accele_l < 0 ) {
        PBDR |= 0x40;
        accele_l = -accele_l;
    }
    work   = MOTOR_CYCLE / 2 - MOTOR_OFFSET - 2;
    work   = (long)work * accele_l / 100;
    ITU4_BRA = MOTOR_CYCLE / 2 - 2 - work;

    /* 右モータ */
    if( accele_r > 0 ) {
        PBDR &= 0x7f;
    } else if( accele_r < 0 ) {
        PBDR |= 0x80;
        accele_r = -accele_r;
    }
    work   = MOTOR_CYCLE / 2 - MOTOR_OFFSET - 2;
    work   = (long)work * accele_r / 100;
    ITU3_BRB = MOTOR_CYCLE / 2 - 2 - work;
}

/************************************************************************/
/* 前輪の速度制御                                                       */
/* 引数　 左モータ:-100〜100 , 右モータ:-100〜100                       */
/*        0で停止、100で正転100%、-100で逆転100%                        */
/************************************************************************/
void speed_f( int accele_l, int accele_r )
{
    unsigned char   sw_data;
    unsigned long   speed_max;

    sw_data  = dipsw_get() + 5;         /* ディップスイッチ読み込み     */
    speed_max = (unsigned long)(MOTOR_CYCLE-1) * sw_data / 20;

    saveData[7] = accele_l * sw_data / 20;  /* ログ保存                 */
    saveData[8] = accele_r * sw_data / 20;  /* ログ保存                 */

    /* 左前モータ */
    if( accele_l > 0 ) {
        PADR &= 0xfd;
    } else if( accele_l < 0 ) {
        PADR |= 0x02;
        accele_l = -accele_l;
    }
    /* GRBがCNTより20以上小さい値かどうかのチェック */
    if( ITU0_GRB > 20 ) {
        /* GRBが20以上なら　単純に比較 */
        while( (ITU0_CNT >= ITU0_GRB-20) && (ITU0_CNT <= ITU0_GRB) );
    } else {
        /* GRBが20以下なら　上限値からの値も参照する */
        while( (ITU0_CNT >= ITU0_GRA-20) || (ITU0_CNT <= ITU0_GRB) );
    }
    ITU0_GRB = speed_max * accele_l / 100;

    /* 右前モータ */
    if( accele_r > 0 ) {
        PADR &= 0xbf;
    } else if( accele_r < 0 ) {
        PADR |= 0x40;
        accele_r = -accele_r;
    }
    /* GRBがCNTより20以上小さい値かどうかのチェック */
    if( ITU1_GRB > 20 ) {
        /* GRBが20以上なら　単純に比較 */
        while( (ITU1_CNT >= ITU1_GRB-20) && (ITU1_CNT <= ITU1_GRB) );
    } else {
        /* GRBが20以下なら　上限値からの値も参照する */
        while( (ITU1_CNT >= ITU1_GRA-20) || (ITU1_CNT <= ITU1_GRB) );
    }
    ITU1_GRB = speed_max * accele_r / 100;
}

/************************************************************************/
/* 前輪の速度制御2 ディップスイッチには関係しないspeed関数              */
/* 引数　 左モータ:-100〜100 , 右モータ:-100〜100                       */
/*        0で停止、100で正転100%、-100で逆転100%                        */
/************************************************************************/
void speed2_f( int accele_l, int accele_r )
{
    unsigned long   speed_max;

    saveData[7] = accele_l;             /* ログ保存                     */
    saveData[8] = accele_r;             /* ログ保存                     */

    speed_max = MOTOR_CYCLE - 1;

    /* 左前モータ */
    if( accele_l > 0 ) {
        PADR &= 0xfd;
    } else if( accele_l < 0 ) {
        PADR |= 0x02;
        accele_l = -accele_l;
    }
    /* GRBがCNTより20以上小さい値かどうかのチェック */
    if( ITU0_GRB > 20 ) {
        /* GRBが20以上なら　単純に比較 */
        while( (ITU0_CNT >= ITU0_GRB-20) && (ITU0_CNT <= ITU0_GRB) );
    } else {
        /* GRBが20以下なら　上限値からの値も参照する */
        while( (ITU0_CNT >= ITU0_GRA-20) || (ITU0_CNT <= ITU0_GRB) );
    }
    ITU0_GRB = speed_max * accele_l / 100;

    /* 右前モータ */
    if( accele_r > 0 ) {
        PADR &= 0xbf;
    } else if( accele_r < 0 ) {
        PADR |= 0x40;
        accele_r = -accele_r;
    }
    /* GRBがCNTより20以上小さい値かどうかのチェック */
    if( ITU1_GRB > 20 ) {
        /* GRBが20以上なら　単純に比較 */
        while( (ITU1_CNT >= ITU1_GRB-20) && (ITU1_CNT <= ITU1_GRB) );
    } else {
        /* GRBが20以下なら　上限値からの値も参照する */
        while( (ITU1_CNT >= ITU1_GRA-20) || (ITU1_CNT <= ITU1_GRB) );
    }
    ITU1_GRB = speed_max * accele_r / 100;
}

/************************************************************************/
/* 後モータ停止動作（ブレーキ、フリー）                                 */
/* 引数　 左モータ:FREE or BRAKE , 右モータ:FREE or BRAKE               */
/************************************************************************/
void motor_mode_r( int mode_l, int mode_r )
{
    if( mode_l ) {
        P1DR |= 0x01;
    } else {
        P1DR &= 0xfe;
    }
    if( mode_r ) {
        P1DR |= 0x02;
    } else {
        P1DR &= 0xfd;
    }
}

/************************************************************************/
/* 前モータ停止動作（ブレーキ、フリー）                                 */
/* 引数　 左モータ:FREE or BRAKE , 右モータ:FREE or BRAKE               */
/************************************************************************/
void motor_mode_f( int mode_l, int mode_r )
{
    if( mode_l ) {
        P1DR |= 0x04;
    } else {
        P1DR &= 0xfb;
    }
    if( mode_r ) {
        P1DR |= 0x08;
    } else {
        P1DR &= 0xf7;
    }
}

/************************************************************************/
/* サーボモータ制御                                                     */
/* 引数　 サーボモータPWM：-100〜100                                    */
/************************************************************************/
void LED_Rught( int pwm )
{
    unsigned int    work;

    saveData[5] = pwm;                  /* ログ保存                     */

    if( pwm > 0 ) {
        PADR &= 0x7f;
    } else if( pwm < 0 ) {
        PADR |= 0x80;
        pwm = -pwm;
    }
    work   = MOTOR_CYCLE / 2 - MOTOR_OFFSET - 2;
    work   = (long)work * pwm / 100;
    ITU4_BRB = MOTOR_CYCLE / 2 - 2 - work;
}

/************************************************************************/
/* サーボモータ停止動作（ブレーキ、フリー）                             */
/* 引数　 FREE or BRAKE                                                 */
/************************************************************************/
void motor_mode_s( int mode )
{
    if( mode ) {
        P3DR |= 0x80;
    } else {
        P3DR &= 0x7f;
    }
}

/************************************************************************/
/* ブザー制御                                                           */
/* 引数　0:ブザーOFF 1:ブザーON                                         */
/************************************************************************/
void beep_out( int flag )
{
    if( flag ) {
        P6DR |= 0x10;
    } else {
        P6DR &= 0xef;
    }
}

/*======================================================================*/
/* 応用関数                                                             */
/*======================================================================*/

/************************************************************************/
/* モジュール名 servoControl                                            */
/* 処理概要     サーボモータ制御                                        */
/* 引数         なし                                                    */
/* 戻り値       グローバル変数 iServoPwm に代入                         */
/************************************************************************/
void servoControl( void )
{
    int     i, iRet, iP, iD;
    int     kp, kd;

//    i = getAnalogSensor();              /* センサ値取得                 */
    kp = dipsw_get2() & 0x0f;           /* 調整できたらP,D値は固定値に  */
    kd = (dipsw_get2() >> 4) * 5;       /* してください                 */

    /* サーボモータ用PWM値計算 */
    iP = kp * i;                        /* 比例                         */
    iD = kd * (iSensorBefore - i );     /* 微分(目安はPの5〜10倍)       */
    iRet = iP - iD;
    iRet /= 64;

    /* PWMの上限の設定 */
    if( iRet >  50 ) iRet =  50;        /* マイコンカーが安定したら     */
    if( iRet < -50 ) iRet = -50;        /* 上限を90くらいにしてください */
    iServoPwm = iRet;

    iSensorBefore = i;                  /* 次回はこの値が1ms前の値となる*/
}

/************************************************************************/
/* end of file                                                          */
/************************************************************************/